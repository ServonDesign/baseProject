/* stylelint-disable at-rule-name-case, selector-combinator-space-after, block-no-empty, block-closing-brace-newline-before */

//new vars
@default-is-grid: false;

//==========
// Container
//==========
// the container is used to wrap page elements, it now has nothing to do with columns

.container(@fluid: none, @gutterType: @default-gutterType) when (@fluid = fluid){
	#container-helpers.basic-container();

	@media (min-width: @container-gutter-breakpoint){
		padding-left: @fluid-gutter;
		padding-right: @fluid-gutter;
	}
}

.container(@fluid: none, @gutterType: @default-gutterType) when (@fluid = fluid) and (@gutterType = pullin){
	#container-helpers.basic-container();

	@media (min-width: @container-gutter-breakpoint){
		padding-left: @fluid-pull-in-gutter;
		padding-right: @fluid-pull-in-gutter;
	}
}

.container(@fluid: none, @gutterType: @default-gutterType) when (default()){
	#container-helpers.basic-container();
	max-width: @max-container-width;

	@media (min-width: @container-gutter-breakpoint){
		padding-left: @gutter;
		padding-right: @gutter;
	}
}

#container-helpers{
	.basic-container(){
		margin-left: auto;
		margin-right: auto;
		width: 100%;
	}
}

//==========
// Columns
//==========
.columns(@breakpoint: @default-breakpoint, @isGrid: @default-is-grid) when (@isGrid = true){
	#column-helpers.getBreakpoint(@breakpoint);

	@media(min-width: @breakpointValue){
		.flexbox();
		.flex-wrap(wrap);
	}
}

.columns(@breakpoint: @default-breakpoint, @isGrid: @default-is-grid) when (default()){
	#column-helpers.getBreakpoint(@breakpoint);

	@media(min-width: @breakpointValue){
		.flexbox();
	}
}

.column(@columns: @max-columns, @breakpoint: @default-breakpoint){
	.flex(1);
}

#column-helpers{
	.getBreakpoint(@breakpoint) when (@breakpoint = xs){
		@breakpointValue: @xs-min;
	}
	.getBreakpoint(@breakpoint) when (@breakpoint = sm){
		@breakpointValue: @sm-min;
	}
	.getBreakpoint(@breakpoint) when (@breakpoint = md){
		@breakpointValue: @md-min;
	}
	.getBreakpoint(@breakpoint) when (@breakpoint = lg){
		@breakpointValue: @lg-min;
	}
	.getBreakpoint(@breakpoint) when (@breakpoint = xlg){
		@breakpointValue: @xlg-min;
	}
}

/* stylelint-enable */
