{"version":3,"sources":["styleguide/base.less","../../$stdin","styleguide/grid.less","base/mixins/flexmixins.less","base/type/typevars.less","base/mixins/prefixmixins.less","base/animation/easing.less","styleguide/svg.less","base/grid/mixins/columns.less","base/grid/mixins/grid.less","base/grid/mixins/helpers.less","base/grid/mixins/container.less","base/grid/mixins/gutter.less","base/mixins/nthSelectors.less","base/grid/mixins/tile.less"],"names":[],"mappings":"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","file":"styleguide.css","sourceRoot":"/source/","sourcesContent":[".colours{\n\t//.nested-container();\n\tdiv{\n\t\twidth: 200px;\n\t\theight: 100px;\n\t\tmargin-bottom: 10px;\n\t\tborder: 1px solid;\n\t\tposition: relative;\n\t\t&:after{\n\t\t\tcontent: 'test';\n\t\t\tposition: absolute;\n\t\t\tbottom: 10px;\n\t\t\tleft: 10px;\n\t\t}\n\t}\n\tdiv.textcolor{\n\t\tbackground: @text-color;\n\t\t&:after{\n\t\t\tcontent: ~'\"@text-color: ' @text-color ~'\"';\n\t\t\tcolor: #fff;\n\t\t}\n\t}\n}\n\n.font{\n\tfont-size: @base-font-size;\n\tmargin-bottom: 10px;\n\tfont-family: @font-family;\n\t&:after{\n\t\tcontent: ~'\" - ' @font-family ~'\"';\n\t}\n\n\t&-serif{\n\t\tmargin-bottom: 10px;\n\t\tfont-family: @font-family-header;\n\t\t&:after{\n\t\t\tcontent: ~'\" - ' @font-family-header ~'\"';\n\t\t}\n\t}\n\n\t&-norm{\n\t\tfont-style: normal;\n\t}\n\n\t&-italic{\n\t\tfont-style: italic;\n\t}\n\n\t&-100{ font-weight: 100; }\n\t&-200{ font-weight: 200; }\n\t&-300{ font-weight: 300; }\n\t&-400{ font-weight: 400; }\n\t&-500{ font-weight: 500; }\n\t&-600{ font-weight: 600; }\n\t&-700{ font-weight: 700; }\n\t&-800{ font-weight: 800; }\n\t&-900{ font-weight: 900; }\n}\n\n.animation{\n\t//.base-column-p();\n\tbackground: #ccc;\n\tpadding: 15px;\n\tmargin-top: 15px;\n\tmargin-bottom: 15px;\n\n\t&-fade{\n\t\topacity: 1;\n\t\t.transition(opacity 0.3s @easeIn);\n\n\t\t&:hover{\n\t\t\topacity: 0;\n\t\t}\n\t}\n\n\t&-movement{\n\t\tposition: relative;\n\n\t\t&-bar{\n\t\t\tposition: absolute;\n\t\t\twidth: 15px;\n\t\t\theight: 100%;\n\t\t\tleft: 0;\n\t\t\ttop: 0;\n\t\t\tbackground: #666;\n\t\t\t.transition(left 0.8s @easeIn);\n\t\t}\n\n\t\t&:hover &-bar{\n\t\t\tleft: calc(100% ~\" -\" 15px);\n\t\t}\n\t}\n}\n\n.ratio{\n\t&-test{\n\t\tbackground: #ccc;\n\n\t\t&-container{\n\t\t\t//.column-m(6, none);\n\t\t\tmargin-bottom: 20px;\n\t\t}\n\t}\n}\n",null,".container{\n\t.container();\n\t.column-container();\n\n\tmargin-bottom: 60px;\n}\n\n.col{\n\t.column();\n\t.gutter();\n\n\t.flexbox();\n\t.align-items(center);\n\t.align-content(center);\n\t.justify-content(center);\n\tmin-height: 50px;\n\tbackground: #bbf;\n\tmargin-bottom: 30px;\n}\n\n//grids\n.container-grid{\n\t.container();\n\t.column-container();\n\n\t.grid({\n\t\t.grid-column-size(6, sm);\n\t\t.grid-column-size(4, md);\n\t\t.grid-column-size(3, lg);\n\t});\n}\n\n.container-wrap{\n\t.container();\n\t.column-container();\n\t.grid();\n}\n\n\n.grid{\n\t.container();\n\t.column-container();\n\n\t.grid({\n\t\t.grid-column-size(6, sm);\n\t\t.grid-column-size(4, md);\n\t\t.grid-column-size(3, lg);\n\t});\n}\n\n.complex-grid{\n\t.container();\n\t.column-container();\n\n\t.grid({\n\t\t.grid-column-size(6, sm);\n\t\t.grid-column-size(4, md);\n\t\t.grid-column-size(3, lg);\n\n\t\t> * {\n\t\t\t.first(4, {\n\t\t\t\t.column-size(3, md);\n\t\t\t});\n\t\t\t.first(6, {\n\t\t\t\t.column-size(2, lg);\n\t\t\t});\n\t\t\t.between(7, 8, {\n\t\t\t\t.column-size(6, lg);\n\t\t\t});\n\t\t}\n\t});\n}\n\n.col{\n\t&--half{\n\t\t.column-size(6, sm);\n\t}\n\n\t&--third{\n\t\t.column-size(4, sm);\n\t}\n\n\t&--two-thirds{\n\t\t.column-size(8, sm);\n\t}\n}\n\n//tiles\n\n.tile{\n\t.column();\n\t.gutter();\n\n\t.flexbox();\n\t.align-items(center);\n\t.align-content(center);\n\t.justify-content(center);\n\tbackground-color: #bbf;\n\tmin-height: 50px;\n}\n\n.tile-container{\n\t.tile-container(sm);\n\n\t&--3-6-3{\n\t\t> *{\n\t\t\t.column-size(6, sm);\n\t\t\t.first-last({\n\t\t\t\t.column-size(3, sm);\n\t\t\t});\n\t\t}\n\t}\n\n\t&--9-3{\n\t\t> *{\n\t\t\t&:first-child{\n\t\t\t\t.column-size(9, sm);\n\t\t\t}\n\t\t\t&:last-child{\n\t\t\t\t.column-size(3, sm);\n\t\t\t}\n\t\t}\n\t}\n\n\t&--4-8{\n\t\t> *{\n\t\t\t&:first-child{\n\t\t\t\t.column-size(4, sm);\n\t\t\t}\n\t\t\t&:last-child{\n\t\t\t\t.column-size(8, sm);\n\t\t\t}\n\t\t}\n\t}\n\n\t&--8-4{\n\t\t> *{\n\t\t\t&:first-child{\n\t\t\t\t.column-size(8, sm);\n\t\t\t}\n\t\t\t&:last-child{\n\t\t\t\t.column-size(4, sm);\n\t\t\t}\n\t\t}\n\t}\n}\n\n.tile--notgut{\n\t.column();\n\t.flexbox();\n\tmin-height: 50px;\n\n\t&--inner{\n\t\t.flexbox();\n\t\t.align-items(center);\n\t\t.align-content(center);\n\t\t.justify-content(center);\n\t\tbackground-color: #bbf;\n\t\t.flex-grow(1);\n\t\tbox-shadow: inset 0 0 2px rgba(0,0,0,0.5);\n\t}\n}\n\n.tile-container--nogut{\n\t.tile-container--nogutter(sm);\n}\n\n\n//prefabs\n.pf-column{\n\tmin-height: 50px;\n\tmargin-bottom: 15px;\n\tbackground-color: #bbf;\n\t.flexbox();\n\t.align-items(center);\n\t.align-content(center);\n\t.justify-content(center);\n}\n","// display: inline-flex //\n// applies to flex container\n\n.inline-flexbox(){\n\t// tweener -ms- spec\n\tdisplay: -ms-inline-flexbox;\n\t// 2013 spec\n\tdisplay: -webkit-inline-flex;\n\tdisplay: -moz-inline-flex;\n\tdisplay: -ms-inline-flex;\n\tdisplay: -o-inline-flex;\n\tdisplay: inline-flex;\n}\n// display: flex //\n// applies to flex container\n\n.flexbox(){\n\t// // tweener -ms- spec\n\t// display: -webkit-flexbox;\n\t// display: -moz-flexbox;\n\tdisplay: -ms-flexbox;\n\t// display: -o-flexbox;\n\t// display: flexbox;\n\t// 2013 spec\n\tdisplay: -webkit-flex;\n\tdisplay: -moz-flex;\n\tdisplay: -ms-flex;\n\tdisplay: -o-flex;\n\tdisplay: flex;\n}\n\n// flex //\n\n// applies to flex-items\n\n// specifying how items flex, in shorthand (like background property is shorthand)\n\n// 2009 spec is box-flex, and only accepts numbers with decimals\n// tweener -ms- spec and 2013 spec both use flex and contain 3 values instead of just one\n// tweener spec has different names for their values but the values do the same thing\n\n// 2009 spec only accepts a number (not just integer) as an input\n\n// tweener -ms- spec works as follows\n// -ms-flex: <positive-flex> <negative-flex> <preferred-size>\n// positive-flex is integer indicating whether item should grow\n// negative-flex is integer indicating whether item should shrink\n// preferred-size uses any valid value for width or height (i.e. px, em, rem, %)\n\n// 2013 spec works as follows\n// flex: <flex-grow> <flex-shrink> <flex-basis>\n// flex-grow is integer indicating whether item should grow\n// flex-shrink is integer indicating whether item should shrink\n// flex-basis  uses any valid value for width (i.e. px, em, rem, %)\n\n// handling when 2013 or tweener spec is 'none' instead of shorthand values\n// this should cover all other scenarios that are not 2009 and/or not 'none'\n.flex(@args){\n\t-webkit-flex: @args;\n\t-moz-flex: @args;\n\t-ms-flex: @args;\n\t-o-flex: @args;\n\tflex: @args;\n}\n\n// flex-direction //\n\n// applies to flex container\n\n// 2013 spec\n.flex-direction(@direction){\n\t-webkit-flex-direction: @direction;\n\t-moz-flex-direction: @direction;\n\t-ms-flex-direction: @direction;\n\t-o-flex-direction: @direction;\n\tflex-direction: @direction;\n}\n\n// order //\n\n// applies to flex-items\n\n// specifies the order of an individual flex item within a container; this is an override of natural DOM order\n\n// 2009 spec is box-ordinal-group and starts at 1\n// tweener -ms- spec is flex-order and starts at 0\n// 2013 spec is order and starts at 0\n\n.order(@order){\n\t// tweener -ms- spec\n\t-ms-flex-order: @order;\n\t// 2013 spec\n\t-webkit-order: @order;\n\t-moz-order: @order;\n\t-ms-order: @order;\n\t-o-order: @order;\n\torder: @order;\n}\n\n// flex-wrap //\n\n// applies to flex container\n\n// 2013 spec is flex-wrap instead of box-lines\n// nowrap = single line LTR\n// wrap = multiple lines LTR\n// wrap-reverse = multiple lines, reversed children LTR\n// initial = nowrap\n// not inherited by default; spec inherit to force it\n\n// 2013 spec\n.flex-wrap(@wrap-method){\n\t-webkit-flex-wrap: @wrap-method;\n\t-moz-flex-wrap: @wrap-method;\n\t-ms-flex-wrap: @wrap-method;\n\t-o-flex-wrap: @wrap-method;\n\tflex-wrap: @wrap-method;\n}\n\n// align-items //\n\n// applies to flex container\n\n// Specifies the alignment of flex items within a container on the cross axis\n\n// 2009 property is box-align\n// tweener -ms- spec is flex-align\n// start == flex-start\n// end == flex-end\n// center == center\n// baseline == baseline\n// stretch = stretch\n\n.align-items(@align-item-method) when (@align-item-method = flex-start){\n\t// tweener -ms- spec\n\t-ms-flex-align: start;\n\t// 2013 spec\n\t-webkit-align-items: flex-start;\n\t-moz-align-items: flex-start;\n\t-ms-align-items: flex-start;\n\t-o-align-items: flex-start;\n\talign-items: flex-start;\n}\n\n.align-items(@align-item-method) when (@align-item-method = flex-end){\n\t// tweener -ms- spec\n\t-ms-flex-align: end;\n\t// 2013 spec\n\t-webkit-align-items: flex-end;\n\t-moz-align-items: flex-end;\n\t-ms-align-items: flex-end;\n\t-o-align-items: flex-end;\n\talign-items: flex-end;\n}\n\n// for center, baseline, and stretch, which are the same in all specs\n.align-items(@align-item-method) when\n(@align-item-method = center),\n(@align-item-method = baseline),\n(@align-item-method = stretch){\n\t// tweener -ms- spec\n\t-ms-flex-align: @align-item-method;\n\t// 2013 spec\n\t-webkit-align-items: @align-item-method;\n\t-moz-align-items: @align-item-method;\n\t-ms-align-items: @align-item-method;\n\t-o-align-items: @align-item-method;\n\talign-items: @align-item-method;\n}\n\n// align-self //\n\n// applies to flex-items\n\n// specifying an override alignment of an individual flex-item\n// within a container on the cross axis\n\n// 2009 spec does not have an equivalent fallback\n// tweener -ms- spec is flex-item-align\n// auto == auto\n// start == flex-start\n// end == flex-end\n// center == center\n// baseline == baseline\n// stretch = stretch\n\n.align-self(@align-self-method) when (@align-self-method = flex-start){\n\t// tweener -ms- spec\n\t-ms-flex-item-align: start;\n\tflex-item-align: start;\n\t// 2013 spec\n\t-webkit-align-self: flex-start;\n\t-moz-align-self: flex-start;\n\t-ms-align-self: flex-start;\n\t-o-align-self: flex-start;\n\talign-self: flex-start;\n}\n\n.align-self(@align-self-method) when (@align-self-method = flex-end){\n\t// tweener -ms- spec\n\t-ms-flex-item-align: end;\n\tflex-item-align: end;\n\t// 2013 spec\n\t-webkit-align-self: flex-end;\n\t-moz-align-self: flex-end;\n\t-ms-align-self: flex-end;\n\t-o-align-self: flex-end;\n\talign-self: flex-end;\n}\n\n// for auto, center, baseline, and stretch, which are the same in both specs\n.align-self(@align-self-method) when\n(@align-self-method = auto),\n(@align-self-method = center),\n(@align-self-method = baseline),\n(@align-self-method = stretch){\n\t// tweener -ms- spec\n\t-ms-flex-item-align: @align-self-method;\n\tflex-item-align: @align-self-method;\n\t// 2013 spec\n\t-webkit-align-self: @align-self-method;\n\t-moz-align-self: @align-self-method;\n\t-ms-align-self: @align-self-method;\n\t-o-align-self: @align-self-method;\n\talign-self: @align-self-method;\n}\n\n// Align Content //\n\n// applies to flex container\n\n// Flex line alignment: specifying alignment of flex lines (not individual items) along the cross-axis\n// note: only applies when there is more than one line of content\n\n// 2009 spec does not have an equivalent fallback\n// microsoft property is flex-line-pack\n// flex-end == end\n// flex-start == start\n// space-between == justify\n// space-around == distribute\n// center == center\n// stretch == stretch\n\n.align-content(@align-content-method) when (@align-content-method = flex-start){\n\t// tweener -ms- spec\n\t-ms-flex-line-pack: start;\n\t// 2013 spec\n\t-webkit-align-content: flex-start;\n\t-moz-align-content: flex-start;\n\t-o-align-content: flex-start;\n\talign-content: flex-start;\n}\n\n.align-content(@align-content-method) when (@align-content-method = flex-end){\n\t// tweener -ms- spec\n\t-ms-flex-line-pack: end;\n\t// 2013 spec\n\t-webkit-align-content: flex-end;\n\t-moz-align-content: flex-end;\n\t-o-align-content: flex-end;\n\talign-content: flex-end;\n}\n\n.align-content(@align-content-method) when (@align-content-method = space-between){\n\t// tweener -ms- spec\n\t-ms-flex-line-pack: justify;\n\t// 2013 spec\n\t-webkit-align-content: space-between;\n\t-moz-align-content: space-between;\n\t-o-align-content: space-between;\n\talign-content: space-between;\n}\n\n.align-content(@align-content-method) when (@align-content-method = space-around){\n\t// tweener -ms- spec\n\t-ms-flex-line-pack: distribute;\n\t// 2013 spec\n\t-webkit-align-content: space-around;\n\t-moz-align-content: space-around;\n\t-o-align-content: space-around;\n\talign-content: space-around;\n}\n\n.align-content(@align-content-method) when\n(@align-content-method = center),\n(@align-content-method = stretch){\n\t// tweener -ms- spec\n\t-ms-flex-line-pack: @align-content-method;\n\t// 2013 spec\n\t-webkit-align-content: @align-content-method;\n\t-moz-align-content: @align-content-method;\n\t-o-align-content: @align-content-method;\n\talign-content: @align-content-method;\n}\n\n// Justify Content //\n\n// applies to flex container\n\n// Main Axis Alignment: specifying the alignment of flex items within a container on the primary axis\n\n// 2009 spec == box-pack\n// tweener MS spec == flex-pack\n// current spec == justify-content\n\n// flex-start == start\n// center == center\n// flex-end == end\n// space-between == justify\n// space-around == distribute\n// 2009 spec does not support 'distribute' or 'space-around' property\n\n.justify-content(@justify-method) when (@justify-method = flex-start){\n\t//tweener -ms-\n\t-ms-flex-pack: start;\n\t// current spec\n\t-webkit-justify-content: flex-start;\n\t-moz-justify-content: flex-start;\n\t-ms-justify-content: flex-start;\n\t-o-justify-content: flex-start;\n\tjustify-content: flex-start;\n}\n\n.justify-content(@justify-method) when (@justify-method = flex-end){\n\t// tweener -ms- spec\n\t-ms-flex-pack: end;\n\t// 2013 spec\n\t-webkit-justify-content: flex-end;\n\t-moz-justify-content: flex-end;\n\t-ms-justify-content: flex-end;\n\t-o-justify-content: flex-end;\n\tjustify-content: flex-end;\n}\n\n.justify-content(@justify-method) when (@justify-method = center){\n\t// tweener -ms- spec\n\t-ms-flex-pack: center;\n\t// 2013 spec\n\t-webkit-justify-content: center;\n\t-moz-justify-content: center;\n\t-ms-justify-content: center;\n\t-o-justify-content: center;\n\tjustify-content: center;\n}\n\n.justify-content(@justify-method) when (@justify-method = space-between){\n\t// tweener -ms- spec\n\t-ms-flex-pack: justify;\n\t// 2013 spec\n\t-webkit-justify-content: space-between;\n\t-moz-justify-content: space-between;\n\t-ms-justify-content: space-between;\n\t-o-justify-content: space-between;\n\tjustify-content: space-between;\n}\n\n.justify-content(@justify-method) when (@justify-method = space-around){\n\t// 2009 spec has no equivalent\n\t// tweener -ms- spec\n\t-ms-flex-pack: distribute;\n\t// 2013 spec\n\t-webkit-justify-content: space-around;\n\t-moz-justify-content: space-around;\n\t-ms-justify-content: space-around;\n\t-o-justify-content: space-around;\n\tjustify-content: space-around;\n}\n\n// flex-grow //\n\n// applies to flex-items\n\n// controls how an individual flex item in a flex container will grow\n// flex grow factor is a multiplier that determines how much a flex item grows relative to the other\n// items in the container\n\n// flex-grow is the first of three shorthand values in the flex property\n\n// 2009 spec has box-flex which is an effectively equivalent concept to flex-grow, since it only\n// controls positive growth of flex items\n\n.flex-grow(@multiplier){\n\t// 2013 spec and tweener -ms- spec\n\t-webkit-flex-grow: @multiplier;\n\t-moz-box-flex: @multiplier;\n\t-ms-flex: @multiplier 1 auto;\n\tflex-grow: @multiplier;\n}\n\n// flex-shrink //\n\n// applies to flex-items\n\n// controls how an individual flex item in a flex container will shrink\n// flex shrink factor is a multiplier that determines how much a flex item shrinks relative to the other\n// items in the container\n\n// flex-shrink is the second of three shorthand values in the flex property\n\n// 2009 spec does not have an equivalent to flex-shrink\n// controls positive growth of flex items\n\n.flex-shrink(@multiplier){\n\t// 2009 spec does not have an equivalent to flex-shrink\n\t// 2013 spec and tweener -ms- spec\n\t-webkit-flex-shrink: @multiplier;\n\t-ms-flex: 0 @multiplier auto;\n\tflex-shrink: @multiplier;\n}\n\n// flex-basis //\n\n// applies to flex-items\n\n// controls initial width of a flex item, as specified by a standard width value, or 'auto'\n\n// flex-basis is the third of three shorthand values in the flex property\n\n// 2009 spec does not have an equivalent to flex-basis\n\n.flex-basis(@width){\n\t// 2009 spec does not have an equivalent to flex-basis\n\t// 2013 spec and tweener -ms- spec\n\t-webkit-flex-basis: @width;\n\t-ms-flex: 0 1 @width;\n\tflex-basis: @width;\n}\n\n// flex-flow //\n\n// applies to flex container\n\n// flex-flow is actually a shorthand combination of flex-direction and flex-wrap\n\n// flex-direction accepts row | row-reverse | column | column-reverse\n// flex-wrap accepts nowrap | wrap | wrap-reverse\n\n.flex-flow (@direction; @rest...){\n\t-webkit-flex-flow: @direction @rest;\n\t-ms-flex-flow: @direction @rest;\n\tflex-flow: @direction @rest;\n}\n","//====================\n// Typography Vars\n//====================\n\n//scale factors -- don't change\n@minor-second:          1.067;\n@major-second:          1.125;\n@minor-third:           1.2;\n@major-third:           1.25;\n@perfect-fourth:        1.333;\n@dim-fifth:             1.414;\n@perfect-fifth:         1.5;\n@minor-sixth:           1.6;\n@golden-section:        1.618;\n\n// Font-family\n//===============\n//unloaded font\n@font-family-unloaded:\t\t\tsans-serif;\n@font-family-header-unloaded:\tsans-serif;\n\n//subset loaded font\n@font-family-subset: \t\t\t'aileron_subset', sans-serif;\n@font-family-header-subset:\t\t'aileron_subset', sans-serif;\n\n//full font loaded\n@font-family: \t\t\t\t\t'aileron', sans-serif;\n@font-family-header:\t\t\t'aileron', sans-serif;\n\n//font-family default\n// @font-family:           'Helvetica Neue', 'Roboto', 'helveticaui';\n// @font-family-serif:     'Helvetica Neue', 'Roboto', 'helveticaui';\n\n// Base Values\n//===============\n//generally around deskptop size\n@base-unit: \t\t\trem;\n@base-scale: \t\t\t@perfect-fifth;\n@base-font-size:        1.6rem;\n\n// Vertical Aligning\n//===============\n@margin-top:            1em;\n@margin-bottom:         0.66em;\n@margin-top-neg:        -0.25em;\n\n//line-heights for genrally desktop\n@h-line-height:         1.2;\n@p-line-height:         1.6;\n\n// Font Weights\n//===============\n@base-font-weight: \t\t300;\n@headings-font-weight:  300;\n@strong-weight:         600;\n","/* stylelint-disable rule-non-nested-empty-line-before */\n//---------------------------------------------------\n//  LESS Prefixer altered\n//---------------------------------------------------\n//\n//  All of the CSS3 fun, none of the prefixes!\n//\n//  As a rule, you can use the CSS properties you\n//  would expect just by adding a '.':\n//\n//  box-shadow => .box-shadow(@args)\n//\n//  Also, when shorthand is available, arguments are\n//  not parameterized. Learn CSS, not LESS Prefixer.\n//\n//  -------------------------------------------------\n//  TABLE OF CONTENTS\n//  (*) denotes a syntax-sugar helper\n//  -------------------------------------------------\n//\n//   .keyframes(@name; @args)\n//\t .animation(@args)\n//          .animation-delay(@delay)\n//          .animation-direction(@direction)\n//          .animation-duration(@duration)\n//          .animation-fill-mode(@mode)\n//          .animation-iteration-count(@count)\n//          .animation-name(@name)\n//          .animation-play-state(@state)\n//          .animation-timing-function(@function)\n//      .columns(@args)\n//          .column-count(@count)\n//          .column-gap(@gap)\n//          .column-rule(@args)\n//          .column-width(@width)\n//      .transform(@args)\n//          .transform-origin(@args)\n//          .transform-style(@style)\n//          .rotate(@deg)\n//          .scale(@factor)\n//          .translate(@x,@y)\n//          .translate3d(@x,@y,@z)\n//          .translateHardware(@x,@y) *\n//      .transition(@args)\n//          .transition-delay(@delay)\n//          .transition-duration(@duration)\n//          .transition-property(@property)\n//          .transition-timing-function(@function)\n//      Flexbox:\n//          .flexbox()\n//          .inline-flexbox()\n//              .flex-flow(@direction: row, @wrap: nowrap)\n//                  .flex-direction(@direction: row)\n//                  .flex-wrap(@wrap: nowrap)\n//              .justify-content(@justification)\n//              .align-items(@mode)\n//              .align-content(@alignment)\n//              .flex(@args: none)\n//                  .flex-grow(@grow: 1)\n//                  .flex-shrink(@shrink: 1)\n//                  .flex-basis(@basis: auto)\n//              .order(@num: 0)\n//              .align-self(@align: auto)\n//\n//  Credit to LESS Elements for the motivation and\n//  to CSS3Please.com for implementation.\n//\n//  Copyright (c) 2012 Joel Sutherland\n//  MIT Licensed:\n//  http://www.opensource.org/licenses/mit-license.php\n//\n//---------------------------------------------------\n\n// Animation\n.keyframes(@name; @args){\n\t@-webkit-keyframes @name{ @args(); }\n\n\t@keyframes @name{ @args(); }\n}\n.animation(@args){\n\t-webkit-animation: @args;\n\tanimation: @args;\n}\n.animation-delay(@delay){\n\t-webkit-animation-delay: @delay;\n\tanimation-delay: @delay;\n}\n.animation-direction(@direction){\n\t-webkit-animation-direction: @direction;\n\t-o-animation-direction: @direction;\n}\n.animation-duration(@duration){\n\t-webkit-animation-duration: @duration;\n\t-o-animation-duration: @duration;\n}\n.animation-fill-mode(@mode){\n\t-webkit-animation-fill-mode: @mode;\n\tanimation-fill-mode: @mode;\n}\n.animation-iteration-count(@count){\n\t-webkit-animation-iteration-count: @count;\n\tanimation-iteration-count: @count;\n}\n.animation-name(@name){\n\t-webkit-animation-name: @name;\n\tanimation-name: @name;\n}\n.animation-play-state(@state){\n\t-webkit-animation-play-state: @state;\n\tanimation-play-state: @state;\n}\n.animation-timing-function(@function){\n\t-webkit-animation-timing-function: @function;\n\tanimation-timing-function: @function;\n}\n\n// Columns\n\n.columns(@args){\n\t-webkit-columns: @args;\n\t-moz-columns: @args;\n\tcolumns: @args;\n}\n.column-count(@count){\n\t-webkit-column-count: @count;\n\t-moz-column-count: @count;\n\tcolumn-count: @count;\n}\n.column-gap(@gap){\n\t-webkit-column-gap: @gap;\n\t-moz-column-gap: @gap;\n\tcolumn-gap: @gap;\n}\n.column-width(@width){\n\t-webkit-column-width: @width;\n\t-moz-column-width: @width;\n\tcolumn-width: @width;\n}\n.column-rule(@args){\n\t-webkit-column-rule: @args;\n\t-moz-column-rule: @args;\n\tcolumn-rule: @args;\n}\n\n// Transforms\n\n.transform(@args){\n\t-webkit-transform: @args;\n\t-ms-transform: @args;\n\ttransform: @args;\n}\n.transform-origin(@args){\n\t-webkit-transform-origin: @args;\n\t-ms-transform-origin: @args;\n\ttransform-origin: @args;\n}\n.transform-style(@style){\n\t-webkit-transform-style: @style;\n\t-ms-transform-style: @style;\n\ttransform-style: @style;\n}\n.rotate(@deg: 45deg){\n\t.transform(rotate(@deg));\n}\n.scale(@factor: .5){\n\t.transform(scale(@factor));\n}\n.translate(@x, @y){\n\t.transform(translate(@x, @y));\n}\n.translateX(@x){\n\t.transform(translateX(@x));\n}\n.translateY(@y){\n\t.transform(translateY(@y));\n}\n.translate3d(@x, @y, @z){\n\t.transform(translate3d(@x, @y, @z));\n}\n.translateHardware(@x, @y){\n\t.translate(@x, @y);\n\t-webkit-transform: translate3d(@x, @y, 0);\n\t-o-transform: translate3d(@x, @y, 0);\n\ttransform: translate3d(@x, @y, 0);\n}\n\n// Transitions\n\n.transition(@args: 200ms){\n\ttransition: @args;\n}\n.transition-delay(@delay: 0){\n\ttransition-delay: @delay;\n}\n.transition-duration(@duration: 200ms){\n\ttransition-duration: @duration;\n}\n.transition-property(@property: all){\n\ttransition-property: @property;\n}\n.transition-timing-function(@function: ease){\n\ttransition-timing-function: @function;\n}\n/* stylelint-enable */\n","//====================\n// Easing\n//====================\n//basic ease in\n@easeIn: \t\t\tcubic-bezier(0.3, 0.15, 0.18, 1);\n",".svg-list{\n\tmargin-top: 50px;\n\t.column-container();\n\t.justify-content(center);\n\t.grid({\n\t\t.grid-column-size(2);\n\t});\n}\n\n.svg-item{\n\t.flexbox();\n\t.flex-direction(column);\n\t.align-items(center);\n\tmargin-bottom: 25px;\n\n\t*{\n\t\tpointer-events: none;\n\t}\n\n\tcursor: pointer;\n\t&--fill{\n\t\tfill: #666;\n\t}\n\t&--stroke{\n\t\tstroke: #666;\n\t}\n}\n","@import \"helpers\";\n\n//==========\n// Columns\n//==========\n\n//basic column\n.column(){\n\t.flex(1 1 0);\n}\n\n// @breakpoint: below the chosen breakpoint all columns will become 100% width as we remove flex\n// @isVertical: if vertical is true we change the direction to flex-direction column, used in columns normally\n.column-container(@breakpoint: @def-column-container-breakpoint, @isvertical: false) when (@breakpoint = none){\n\twidth: 100%;\n\t.flexbox();\n\t#grid-helpers.getIsVertical(@isvertical);\n}\n\n.column-container(@breakpoint: @def-column-container-breakpoint, @isvertical: false) when (default()){\n\twidth: 100%;\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t@media(min-width: @breakpointValue){\n\t\t.flexbox();\n\t\t#grid-helpers.getIsVertical(@isvertical);\n\t}\n}\n\n// manually set the column size, the size will be affected if flex-wrap is set or not. Grid mixin sets flex-wrap\n// if flex wrap is not set it will shrink or stretch based on avalible space\n// @columnSize: the column size calculated from the max columns, example half is 6, (6/12)\n// @breakpoint: breakpoint at which this size is applied, using min width\n// @marginGutterSize: used to calculate the width, need to negate the margin gutter from the width for it to fit\n.column-size(@columnSize: @max-columns, @breakpoint: @def-column-size-breakpoint, @marginGutterSize: @column-gutter) when (@breakpoint = none){\n\t#grid-helpers.getColumnSize(@columnSize, @marginGutterSize);\n}\n\n.column-size(@columnSize: @max-columns, @breakpoint: @def-column-size-breakpoint, @marginGutterSize: @column-gutter) when (default()){\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t@media(min-width: @breakpointValue){\n\t\t#grid-helpers.getColumnSize(@columnSize, @marginGutterSize);\n\t}\n}\n\n//no gutter for bug in php compiler not allowing 0 to be passed as a param\n.column-size--nogutter(@columnSize: @max-columns, @breakpoint: @def-column-size-breakpoint) when (@breakpoint = none){\n\t#grid-helpers.getColumnSize--nogutter(@columnSize);\n}\n\n.column-size--nogutter(@columnSize: @max-columns, @breakpoint: @def-column-size-breakpoint) when (default()){\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t@media(min-width: @breakpointValue){\n\t\t#grid-helpers.getColumnSize--nogutter(@columnSize);\n\t}\n}\n","@import \"helpers\";\n\n//==========\n// grid\n//==========\n// grid sets the container to wrap, allowing for manual sizing of columns\n\n// @rules: for custom rules used inside a grid, for example grid-column-size can be set here\n// or you can set direct decendants using > * selector and set size using column-size.\n// You can also using this in combination with nth selectors\n// allowing you to have one class control the entire layout or an area\n\n// @breakpoint: at which point we stop doing grid and go to basic flex with no wrap\n// this will remove all forced sizing and everything will go into one column above this breakpoint\n// - breakpoint is max width\n\n.grid(@rules: {}, @breakpoint: @def-grid-breakpoint) when (@breakpoint = none){\n\t.flex-wrap(wrap);\n\t.align-items(flex-start);\n    .align-content(flex-start);\n\t@rules();\n}\n\n.grid(@rules: {}, @breakpoint: @def-grid-breakpoint) when (default()){\n\t#grid-helpers.getMaxBreakpoint(@breakpoint);\n\n\t@media(max-width: @breakpointValue){\n\t\t.flex-wrap(wrap);\n\t\t.align-items(flex-start);\n    \t.align-content(flex-start);\n\t\t@rules();\n\t}\n}\n\n// allows you to set common column sizes within a grid at certain breakpoints, applying this to all direct decendants of the grid\n// @columnSize: the column size calculated from the max columns, example half is 6, (6/12)\n// @breakpoint: breakpoint at which this size is applied, using min width\n// @marginGutterSize: used to calculate the width, need to negate the margin gutter from the width for it to fit\n.grid-column-size(@columnSize: @max-columns, @breakpoint: @def-column-size-breakpoint, @marginGutterSize: @column-gutter) when (@breakpoint = none){\n\t> *{\n\t\t.column-size(@columnSize, none, @marginGutterSize);\n\t}\n}\n\n.grid-column-size(@columnSize: @max-columns, @breakpoint: @def-column-size-breakpoint, @marginGutterSize: @column-gutter) when (default()){\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t@media(min-width: @breakpointValue){\n\t\t> *{\n\t\t\t.column-size(@columnSize, none, @marginGutterSize);\n\t\t}\n\t}\n}\n","//==========\n// helpers\n//==========\n#grid-helpers{\n\t.getIsVertical(@isvertical) when (@isvertical = true){\n\t\t.flex-direction(column);\n\t}\n\n\t.getColumnSize(@columnSize, @marginGutterSize) when (@marginGutterSize > 0){\n\t\t@calcColumnSize: percentage(@columnSize / @max-columns);\n\t\t.flex-basis(calc(@calcColumnSize ~\" -\" @marginGutterSize));\n\t}\n\n\t.getColumnSize(@columnSize, @marginGutterSize) when (default()){\n\t\t@calcColumnSize: percentage(@columnSize / @max-columns);\n\t\t.flex-basis(@calcColumnSize);\n\t}\n\n\t//no gutter for bug in php compiler not allowing 0 to be passed as a param\n\t.getColumnSize--nogutter(@columnSize){\n\t\t@calcColumnSize: percentage(@columnSize / @max-columns);\n\t\t.flex-basis(@calcColumnSize);\n\t}\n\n\t//min breakpoint map\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = xs){\n\t\t@breakpointValue: @xs-min;\n\t}\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = sm){\n\t\t@breakpointValue: @sm-min;\n\t}\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = md){\n\t\t@breakpointValue: @md-min;\n\t}\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = lg){\n\t\t@breakpointValue: @lg-min;\n\t}\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = xl){\n\t\t@breakpointValue: @xl-min;\n\t}\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = xxl){\n\t\t@breakpointValue: @xxl-min;\n\t}\n\t.getMinBreakpoint(@breakpoint) when (@breakpoint = xxxl){\n\t\t@breakpointValue: @xxxl-min;\n\t}\n\n\t//max breakpoint map\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = xxs){\n\t\t@breakpointValue: @xxs-max;\n\t}\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = xs){\n\t\t@breakpointValue: @xs-max;\n\t}\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = sm){\n\t\t@breakpointValue: @sm-max;\n\t}\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = md){\n\t\t@breakpointValue: @md-max;\n\t}\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = lg){\n\t\t@breakpointValue: @lg-max;\n\t}\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = xl){\n\t\t@breakpointValue: @xl-max;\n\t}\n\t.getMaxBreakpoint(@breakpoint) when (@breakpoint = xxl){\n\t\t@breakpointValue: @xxl-max;\n\t}\n}\n","//==========\n// Container\n//==========\n// the container is used to wrap page elements, it now has nothing to do with columns\n\n// @fluid: if fluid is set there is no max page width, we also ditch margin autos and replace it with percentage padding\n// @gutterType: the only option is pullin or nothing, pullin adds larger padding to pull-in the page more\n\n.container(@fluid: none, @gutterType: @def-gutterType) when (@fluid = fluid){\n\twidth: 100%;\n\n\t@media (min-width: @container-gutter-breakpoint){\n\t\tpadding-left: @fluid-gutter;\n\t\tpadding-right: @fluid-gutter;\n\t}\n}\n\n.container(@fluid: none, @gutterType: @def-gutterType) when (@fluid = fluid) and (@gutterType = pullin){\n\twidth: 100%;\n\n\t@media (min-width: @container-gutter-breakpoint){\n\t\tpadding-left: @fluid-pull-in-gutter;\n\t\tpadding-right: @fluid-pull-in-gutter;\n\t}\n}\n\n.container(@fluid: none, @gutterType: @def-gutterType) when (default()){\n\twidth: 100%;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tmax-width: @max-container-width;\n\n\t@media (min-width: @container-gutter-breakpoint){\n\t\tpadding-left: @gutter;\n\t\tpadding-right: @gutter;\n\t}\n}\n\n// for manual gutter application\n// @fluid: if fluid is set there is no max page width\n.container--gutter(@fluid: none, @gutterSize) when (@fluid = fluid){\n\twidth: 100%;\n\n\t@media (min-width: @container-gutter-breakpoint){\n\t\tpadding-left: @gutterSize;\n\t\tpadding-right: @gutterSize;\n\t}\n}\n\n.container--gutter(@fluid: none, @gutterSize) when (default()){\n\twidth: 100%;\n\tmargin-left: auto;\n\tmargin-right: auto;\n\tmax-width: @max-container-width;\n\n\t@media (min-width: @container-gutter-breakpoint){\n\t\tpadding-left: @gutterSize;\n\t\tpadding-right: @gutterSize;\n\t}\n}\n","//==========\n// gutter\n//==========\n// applies gutters to columns, this can be optional so not used as a standard in column\n\n// @type: can be changed between margin and padding\n// @size: gutter size\n.gutter(@type: margin, @size: @column-gutter-half){\n\t@{type}-left: @size;\n\t@{type}-right: @size;\n}\n\n//for bug in php compiler not allowing 0 to be passed as a param\n.gutter-reset(@type: margin){\n\t@{type}-left: 0;\n\t@{type}-right: 0;\n}\n","/// Select all children from the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.first(@num, @content){\r\n\t&:nth-child(-n + @{num}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all children from the last to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.last(@num, @content){\r\n\t&:nth-last-child(-n + @{num}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all children after the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.after-first(@num, @content){\r\n\t@calcNum: @num + 1;\r\n\t&:nth-child(n + @{calcNum}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all children before `$num` from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.from-end(@num, @content){\r\n\t&:nth-last-child(@{num}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.between(@first, @last, @content){\r\n\t&:nth-child(n + @{first}):nth-child(-n + @{last}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all even children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.pair-between(@first, @last, @content){\r\n\t&:nth-child(even):nth-child(n + @{first}):nth-child(-n + @{last}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all odd children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.impair-between(@first, @last, @content){\r\n\t&:nth-child(odd):nth-child(n + @{first}):nth-child(-n + @{last}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all `$num` children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.n-between(@num, @first, @last, @content){\r\n\t&:nth-child(@{num}n):nth-child(n + @{first}):nth-child(-n + @{last}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all children but `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.all-but(@num, @content){\r\n\t&:not(:nth-child(@{num})){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n/// @alias every\r\n.each(@num, @content){\r\n\t&:nth-child(@{num}n){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.every(@num, @content){\r\n\t&:nth-child(@{num}n){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select the `$num` child from the start and the `$num` child from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.from-first-last(@num, @content){\r\n\t&:nth-child(@{num}),\r\n\t&:nth-last-child(@{num}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select the item in the middle of `$num` child. Only works with odd number\r\n/// chain.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.middle(@num, @content){\r\n\t@calcNum: round(@num / 2);\r\n\t&:nth-child(@{calcNum}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all children between the `$num` first and the `$num` last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n.all-but-first-last(@num, @content){\r\n\t&:nth-child(n + @{num}):nth-last-child(n + @{num}){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// This I/O mixin will only select the first of `$limit` items. It will not\r\n/// work if there is not as much as item as you set in `$limit`.\r\n/// @group io\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.first-of(@limit, @content){\r\n\t&:nth-last-child(@{limit}):first-child{\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// This I/O mixin will only select the last of `$limit` items. It will not\r\n/// if there is not as much as item as you set in `$limit`.\r\n/// @group io\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.last-of(@limit, @content){\r\n\t&:nth-of-type(@{limit}):nth-last-of-type(1){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all even children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.even(@content){\r\n\t&:nth-child(even){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select all odd children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.odd(@content){\r\n\t&:nth-child(odd){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Select only the first and last child.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.first-last(@content){\r\n\t&:first-child,\r\n\t&:last-child{\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @alias only\r\n.unique(@content){\r\n\t&:only-child{\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.only(@content){\r\n\t&:only-child{\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Will only select children if they are not unique. Meaning if there is at\r\n/// least 2 children, the style is applied.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n.not-unique(@content){\r\n\t&:not(:only-child){\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// This mixin is used to automatically sort z-index in numerical order. But it\r\n/// can also sort them in anti-numerical order, depending the parameters you use.\r\n/// @group using functions\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - Number of children\r\n/// @param {string} $direction [forward] - Direction of the sort\r\n/// @param {number} $index [0] - Index of the sorting\r\n.child-index(@num, @content, @direction: forward, @index: 0, @i: 1) when (@i <= @num){\r\n\t.child-index-direction(@direction, @i, @index, @content);\r\n\t.child-index(@num, @content, @direction, @index, (@i + 1));\r\n}\r\n\r\n.child-index-direction(@direction, @i, @index, @content) when(@direction = forward){\r\n\t&:nth-child(@{i}){\r\n\t\t.order-index(@i, @index);\r\n\t\tz-index: @calcIndex;\r\n\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n.child-index-direction(@direction, @i, @index, @content) when(@direction = backward){\r\n\t&:nth-last-child(@{i}){\r\n\t\t.order-index(@i, @index);\r\n\t\tz-index: @calcIndex;\r\n\r\n\t\t@content();\r\n\t}\r\n}\r\n\r\n/// Used by the child-index mixin. It will returned the proper sorted numbers\r\n/// depending on the `$index` value.\r\n/// @access private\r\n/// @param {number} $num - Number of children\r\n/// @param {number} $index - Index of the sorting\r\n.order-index(@i, @index){\r\n\t@calcIndex: @index + @i;\r\n}\r\n","@import \"helpers\";\n\n//==========\n// Tiles\n//==========\n// creates the styles to create a tiled grid, it doesn't wrap but it allows for vertical groupings which\n// change size based on sibling sizes\n/*\n\tNotes: When using columns with padding type gutter, use tile-container--nogutter or set vertical gutter to 0\n*/\n\n// @breakpoint: below the chosen breakpoint all columns will become 100% width as we remove flex\n// @verticalGutter: the vertical gutter is set based on the breakpoint as well\n.tile-container(@breakpoint: @def-column-container-breakpoint, @gutterType: margin, @totalGutterSize: @column-gutter) when (@gutterType = margin){\n\t@gutterSize: (@totalGutterSize / 2);\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t.container();\n\t.column-container(@breakpoint);\n\n\t&--nested{\n\t\t.column-container(@breakpoint);\n\t}\n\n\t&--vertical{\n\t\t.column-container(@breakpoint, true);\n\n\t\t@media(min-width: @breakpointValue){\n\t\t\t.column();\n\t\t\t.gutter(@gutterType, @gutterSize);\n\n\t\t\t> * + *{\n\t\t\t\tmargin-top: @totalGutterSize;\n\t\t\t}\n\t\t}\n\t}\n\n\t@media(min-width: @breakpointValue){\n\t\t&--vertical &--nested{\n\t\t\twidth: calc(100% ~\" +\" @totalGutterSize);\n\t\t\tmargin-left: -@gutterSize;\n\t\t\tmargin-right: -@gutterSize;\n\t\t}\n\n\t\t&--vertical > *:not(&--nested){\n\t\t\t.gutter-reset(@gutterType);\n\t\t}\n\t}\n}\n\n.tile-container(@breakpoint: @def-column-container-breakpoint, @gutterType: margin, @totalGutterSize: @column-gutter) when (default()){\n\t@gutterSize: (@totalGutterSize / 2);\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t.container();\n\t.column-container(@breakpoint);\n\n\t&--nested{\n\t\t.column-container(@breakpoint);\n\t}\n\n\t&--vertical{\n\t\t.column-container(@breakpoint, true);\n\n\t\t@media(min-width: @breakpointValue){\n\t\t\t.column();\n\t\t\t.gutter(@gutterType, @gutterSize);\n\t\t}\n\t}\n\n\t@media(min-width: @breakpointValue){\n\t\t&--vertical &--nested{\n\t\t\twidth: calc(100% ~\" +\" @totalGutterSize);\n\t\t\tmargin-left: -@gutterSize;\n\t\t\tmargin-right: -@gutterSize;\n\t\t}\n\n\t\t&--vertical > *:not(&--nested){\n\t\t\t.gutter-reset(@gutterType);\n\t\t}\n\t}\n}\n\n//no gutter for bug in php compiler not allowing 0 to be passed as a param\n.tile-container--nogutter(@breakpoint: @def-column-container-breakpoint){\n\t@gutterType: padding;\n\t#grid-helpers.getMinBreakpoint(@breakpoint);\n\n\t.container--gutter(none, (@gutter + @column-gutter-half));\n\t.column-container(@breakpoint);\n\n\t&--nested{\n\t\t.column-container(@breakpoint);\n\t}\n\n\t&--vertical{\n\t\t.column-container(@breakpoint, true);\n\n\t\t@media(min-width: @breakpointValue){\n\t\t\t.column();\n\t\t\t.gutter-reset(@gutterType);\n\t\t}\n\t}\n}\n"]}